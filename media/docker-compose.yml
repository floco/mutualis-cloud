# Services yet to include:
# - plex or emby

version: '2'
services:

# PORTAINER: Container Management
  portainer:
    container_name: portainer
    image: portainer/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${VOLUMES_ROOT}/portainer:/data
    ports:
      - 9000:9000
    restart: always

# ORGANIZR: Front page for all services
  organizr:
    container_name: organizr
    image: lsiocommunity/organizr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${VOLUMES_ROOT}/organizr:/config
    ports:
      - 80:80
    restart: always

# KEEWEB: browse keepass archive
# (to replace by bitwarden light API)
  keeweb:
    container_name: keeweb
    image: antelle/keeweb
    volumes:
      - ${VOLUMES_ROOT}/keeweb:/etc/nginx/external/
    ports:
      - 8002:443
    restart: always

# PYLOAD: download management
  pyload:
    container_name: pyload
    image: writl/pyload:0.4.9
    volumes:
      - ${PYLOAD_DIR}:/opt/pyload/Downloads
      - ${VOLUMES_ROOT}/pyload:/opt/pyload/pyload-config
    ports:
      - 8003:8000
    restart: always

# DUCKDNS: to update DNS with dynamic public IP
  duckdns:
    container_name: duckdns
    image: linuxserver/duckdns:latest
    environment:
      - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
      - TOKEN=${DUCKDNS_TOKEN}
      - PUID=${PUID}
      - PGID=${PGID}
    restart: always

# DNSMASQ: DHCP and DNS
  dnsmasq:
    container_name: dnsmasq
    image: andyshinn/dnsmasq:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
    volumes:
      - ${VOLUMES_ROOT}/dnsmasq:/tmp
    cap_add:
      - NET_ADMIN
    network_mode: "host"
    command: "--domain=${DOCKER_DNS_DOMAIN} --dhcp-range=${DOCKER_DHCP_RANGE},24h --addn-hosts=/tmp/dns-hosts --dhcp-hostsfile=/tmp/dhcp-hosts --dhcp-optsfile=/tmp/dhcp-options --log-facility=-"
    restart: always

# CUPS: Printing service
  cups:
    container_name: cups
    image: mnbf9rca/cups-google-print
    environment:
      - CUPS_USER_ADMIN=${CUPS_USER_ADMIN}
      - CUPS_USER_PASSWORD=${CUPS_USER_PASSWORD}
      - TZ=Europe/Paris
      - TCP_PORT_631=631
    volumes:
      - ${VOLUMES_ROOT}/cups:/config
      - /dev:/dev
      - /etc/avahi/services:/avahi
      - /var/run/dbus:/var/run/dbus
    network_mode: "host"
    privileged: true
    restart: always

# GLANCES: monitoring
  glances:
    image: docker.io/nicolargo/glances
    container_name: glances
    ports:
      - "9001-9002:61208-61209"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - GLANCES_OPT=-w
    pid: "host"
    restart: always

# RESTIC: backup management
# Create Repo: docker-compose exec restic restic init
# Manual Backup: docker-compose exec restic restic backup /data
# List Snapshots: docker-compose exec restic restic snapshots
# List Files in a Snapshot: docker-compose exec restic restic ls <snapshot_id>
# Restore Backup: docker-compose exec restic restic restore latest --target /data/restore
  restic:
    restart: always
    image: jsmitsnl/docker-restic:latest
    hostname: backup
    domainname: mutualis.com
    container_name: restic
    volumes:
      - ${RESTIC_BACKUP_DIR}:/data
    environment:
      - "CRON_BACKUP_EXPRESSION=15   3  *   *   *"
      - "CRON_CLEANUP_EXPRESSION=0   0  *   *   *"
      - "RESTIC_CLEANUP_KEEP_WEEKLY=5"
      - "RESTIC_CLEANUP_KEEP_MONTHLY=12"
      - "RESTIC_CLEANUP_KEEP_YEARLY=75"
      - "RESTIC_CLEANUP_OPTIONS=--prune"
      - "RESTIC_BACKUP_OPTIONS=--exclude=/data/dir/*"
      - "RESTIC_REPOSITORY=${RESTIC_REPOSITORY}"
      - "RESTIC_PASSWORD=${RESTIC_PASSWORD}"

# ZEROTIER: Virtual Network (to access remotely)
# To join a network: docker-compose exec zerotier /zerotier-cli join ${ZEROTIER_NETWORK}
  zerotier:
    image: zerotier/zerotier-containerized
    container_name: zerotier
    volumes:
      - ${VOLUMES_ROOT}/zerotier:/var/lib/zerotier-one
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    network_mode: "host"
    devices:
      - /dev/net/tun:/dev/net/tun
    restart: always

# GOGS: Source code management
  gogs:
    image: gogs/gogs
    container_name: gogs
    volumes:
      - ${VOLUMES_ROOT}/gogs:/data
    ports:
      - "9005:22"
      - "8005:3000"
    restart: always

# FAVA: Finance management
  fava:
    image: yegle/fava
    container_name: fava
    volumes:
      - ${VOLUMES_ROOT}/fava:/root
    environment:
      - BEANCOUNT_INPUT_FILE=/root/main.beancount
    ports:
      - "8004:5000"
    restart: always

# SAMBA: File Share
  samba:
    image: dperson/samba
    container_name: samba
    volumes:
      - ${SAMBA_SHARE1}:/srv/share1
      - ${SAMBA_SHARE2}:/srv/share2
    environment:
      - TZ=Europe/Paris
      - WORKGROUP=WORKGROUP
    network_mode: "host"
    ports:
      - "139:139"
      - "445:445"
      - "137:137/udp"
      - "138:138/udp"
    command: -u "${SAMBA_USER};${SAMBA_PASSWORD}" -s "Share1;/srv/share1;yes;no;no;${SAMBA_USER};${SAMBA_USER}" -s "Share2;/srv/share2;yes;no;no;${SAMBA_USER};${SAMBA_USER}" -n -p
    restart: always

# To uncomment if you want to manage upgrade of docker images automatically
# Until docker-compose issue #1896 becomes available
#  watchtower:
#    container_name: watchtower
#    image: v2tec/watchtower:latest
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    restart: always
