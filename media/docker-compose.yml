version: '2'
services:

# PYLOAD: download management
  pyload:
    image: writl/pyload:latest
    container_name: pyload
    ports:
      - 8001:8000
    environment:
      - UID=${PUID}
      - GID=${PGID}
    volumes:
      - ${DOWNLOAD}:/opt/pyload/Downloads
      - ${VOLUMES_ROOT}/pyload:/opt/pyload/pyload-config
    restart: unless-stopped

# FAVA: Finance management
  fava:
    image: grostim/fava-docker
    container_name: fava
    ports:
      - 8002:5000
    environment:
      - UID=1000
      - GID=1000
      - BEANCOUNT_FILE=/root/main.beancount
    volumes:
      - ${FINANCE}:/root
    restart: unless-stopped

 # ADGUARD: DNS protection
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 68:68/tcp
      - 853:853/tcp
      - 8003:45158/tcp
    volumes:
      - ${VOLUMES_ROOT}/adguard/work:/opt/adguardhome/work
      - ${VOLUMES_ROOT}/adguard/conf:/opt/adguardhome/conf
    restart: unless-stopped

# PORTAINER: Container Management
  portainer:
    container_name: portainer
    image: portainer/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${VOLUMES_ROOT}/portainer:/data
    ports:
      - 9000:9000
    restart: always


# DASHMACHINE: portal
  # dashmachine:
  #   image: rmountjoy/dashmachine:latest
  #   container_name: dashmachine
  #   ports:
  #     - 8888:5000
  #   environment:
  #     - UID=${PUID}
  #     - GID=${PGID}
  #   volumes:
  #     - ${VOLUMES_ROOT}/dashmachine:/dashmachine/dashmachine/user_data
  #   restart: always

#  # VISERON: Video AI
#   viseron:
#     image: roflcoopter/viseron:latest
#     container_name: viseron
#     restart: unless-stopped
#     volumes:
#       - ${VOLUMES_ROOT}/viseron/recordings:/recordings
#       - ${VOLUMES_ROOT}/viseron/config:/config
#       - /etc/localtime:/etc/localtime:ro





# BROADLINK: Learn RF code
#  broadlinkmanager:
#    image: techblog/broadlinkmanager
#    network_mode: host
#    container_name: broadlinkmanager
#    restart: unless-stopped
#    volumes:
#      - ${VOLUMES_ROOT}/broadlinkmanager:/opt/broadlinkmanager/data  

# HEIMDALL: Front page for all services
  # heimdall:
  #   container_name: heimdall
  #   image: linuxserver/heimdall
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=Europe/Paris
  #   volumes:
  #     - ${VOLUMES_ROOT}/heimdall:/config
  #   ports:
  #     - 8000:80
  #     - 8001:443
  #   restart: always

# KEEWEB: browse keepass archive
# (to replace by bitwarden light API)
  # keeweb:
  #   container_name: keeweb
  #   image: antelle/keeweb
  #   volumes:
  #     - ${VOLUMES_ROOT}/keeweb:/etc/nginx/external/
  #   ports:
  #     - 8002:443
  #   restart: always

# # DUCKDNS: to update DNS with dynamic public IP
#   duckdns:
#     container_name: duckdns
#     image: linuxserver/duckdns:latest
#     environment:
#       - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
#       - TOKEN=${DUCKDNS_TOKEN}
#       - PUID=${PUID}
#       - PGID=${PGID}
#     restart: always

# DNSMASQ: DHCP and DNS
  # dnsmasq:
  #   container_name: dnsmasq
  #   image: andyshinn/dnsmasq:latest
  #   ports:
  #     - "53:53/tcp"
  #     - "53:53/udp"
  #     - "67:67/udp"
  #   volumes:
  #     - ${VOLUMES_ROOT}/dnsmasq:/tmp
  #   cap_add:
  #     - NET_ADMIN
  #   network_mode: "host"
  #   command: "--domain=${DOCKER_DNS_DOMAIN} --dhcp-range=${DOCKER_DHCP_RANGE},24h --addn-hosts=/tmp/dns-hosts --dhcp-hostsfile=/tmp/dhcp-hosts --dhcp-optsfile=/tmp/dhcp-options --log-facility=-"
  #   restart: always

# GLANCES: monitoring
  # glances:
  #   image: docker.io/nicolargo/glances
  #   container_name: glances
  #   ports:
  #     - "9001-9002:61208-61209"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - GLANCES_OPT=-w
  #   pid: "host"
  #   restart: always

# RESTIC: backup management
# Create Repo: docker-compose exec restic restic init
# Manual Backup: docker-compose exec restic restic backup /data
# List Snapshots: docker-compose exec restic restic snapshots
# List Files in a Snapshot: docker-compose exec restic restic ls <snapshot_id>
# Restore Backup: docker-compose exec restic restic restore latest --target /data/restore --include /work/foo
  # restic:
  #   restart: always
  #   image: jsmitsnl/docker-restic:latest
  #   hostname: backup
  #   domainname: mutualis.com
  #   container_name: restic
  #   volumes:
  #     - ${RESTIC_BACKUP_DIR}:/data
  #   environment:
  #     - "CRON_BACKUP_EXPRESSION=${RESTIC_CRON_BACKUP_EXPRESSION}"
  #     - "CRON_CLEANUP_EXPRESSION=${RESTIC_CRON_CLEANUP_EXPRESSION}"
  #     - "RESTIC_CLEANUP_KEEP_WEEKLY=5"
  #     - "RESTIC_CLEANUP_KEEP_MONTHLY=12"
  #     - "RESTIC_CLEANUP_KEEP_YEARLY=75"
  #     - "RESTIC_CLEANUP_OPTIONS="
  #     - "RESTIC_BACKUP_OPTIONS=${RESTIC_BACKUP_OPTIONS}"
  #     - "RESTIC_REPOSITORY=${RESTIC_REPOSITORY}"
  #     - "RESTIC_PASSWORD=${RESTIC_PASSWORD}"

# ZEROTIER: Virtual Network (to access remotely)
# To join a network: docker-compose exec zerotier /zerotier-cli join ${ZEROTIER_NETWORK}
  # zerotier:
  #   image: zerotier/zerotier-containerized
  #   container_name: zerotier
  #   volumes:
  #     - ${VOLUMES_ROOT}/zerotier:/var/lib/zerotier-one
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_ADMIN
  #   network_mode: "host"
  #   devices:
  #     - /dev/net/tun:/dev/net/tun
  #   restart: always

# GOGS: Source code management
# to replace by Gitea ?
  # gogs:
  #   image: gogs/gogs
  #   container_name: gogs
  #   volumes:
  #     - ${VOLUMES_ROOT}/gogs:/data
  #   ports:
  #     - "9005:22"
  #     - "8005:3000"
  #   restart: always

# GUACAMOLE: remote access
  # guacamole:
  #   image: oznu/guacamole
  #   container_name: guacamole
  #   # environment:
  #   #   - "EXTENSIONS=auth-duo"
  #   volumes:
  #     - ${VOLUMES_ROOT}/guacamole:/config
  #   ports:
  #     - "9006:8080"
  #   restart: always

# SAMBA: File Share
  # samba:
  #   image: dperson/samba
  #   container_name: samba
  #   volumes:
  #     - ${SAMBA_SHARE1}:/srv/share1
  #     - ${SAMBA_SHARE2}:/srv/share2
  #   environment:
  #     - TZ=Europe/Paris
  #     - WORKGROUP=WORKGROUP
  #   network_mode: "host"
  #   ports:
  #     - "139:139"
  #     - "445:445"
  #     - "137:137/udp"
  #     - "138:138/udp"
  #   command: -u "${SAMBA_USER};${SAMBA_PASSWORD}" -s "Share1;/srv/share1;yes;no;no;${SAMBA_USER};${SAMBA_USER}" -s "Share2;/srv/share2;yes;no;no;${SAMBA_USER};${SAMBA_USER}" -n -p
  #   restart: always

# NFS: File Share
  # nfs:
  #   image: macadmins/unfs3
  #   container_name: nfs
  #   volumes:
  #     - ${SAMBA_SHARE1}:/nfs_share1
  #     - ./nfs/exports:/etc/exports
  #   privileged: true
  #   ports:
  #     - "111:111/tcp"
  #     - "111:111/udp"
  #     - "2049:2049/tcp"
  #     - "2049:2049/udp"
  #   restart: always
  
# To uncomment if you want to manage upgrade of docker images automatically
# Until docker-compose issue #1896 becomes available
#  watchtower:
#    container_name: watchtower
#    image: v2tec/watchtower:latest
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    restart: always
